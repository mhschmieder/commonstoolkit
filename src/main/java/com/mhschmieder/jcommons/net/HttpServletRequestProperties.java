/**
 * MIT License
 *
 * Copyright (c) 2020, 2024 Mark Schmieder
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * This file is part of the JCommons Library
 *
 * You should have received a copy of the MIT License along with the
 * JCommons Library. If not, see <https://opensource.org/licenses/MIT>.
 *
 * Project: https://github.com/mhschmieder/jcommons
 */
package com.mhschmieder.jcommons.net;

import java.net.URL;
import java.util.Objects;

/**
 * {@code HttpServletRequestProperties} is a container for server request properties
 * typically sent to a servlet using the HTTP protocol, whether for authorization
 * of login credentials, or some sort of data or client/server query.
 * <p>
 * These are all informal parameters that will be specific to each client/server
 * application. It is meant to be a container for the most common parameters.
 */
public class HttpServletRequestProperties {

    /** 
     * The Client Build ID may be used by Servlets and other Services to verify
     * protocol compatibility between an installed Client and the Server.
     */
    public int clientBuildId;

    /** 
     * The Client Type describes the variation of the application, such as Pro
     * vs. Free. This helps a Service to determine which features are supported. 
     */
    public String clientType;

    /** 
     * The canonical Local Host Name generated by InetAddress.getLocalHost()
     * followed by InetAddress.getCanonicalHostName() on the returned value.
     */
    public String localHostName;

    /** 
     * The Web Host Name usually refers to the protocol-stripped URL of the
     * WAR (Web Archive) for the Servlet (e.g., {shortname.companyname.com}).
     */
    public String webHostName;

    /** 
     * The Relative URL for Local Host to Web Host HTTP Requests/Responses. 
     */
    public URL httpServletUrl;

    /**
     * Constructs a fully-specific HttpServletRequestProperties instance.
     *
     * @param pClientBuildId The Client Build ID used by the servlet to check
     *                       for client/server protocol compatibility.
     * @param pClientType The flavor of the client application, such as "Pro"
     * @param pLocalHostName The canonical InetAddress.getLocalHost() name
     * @param pWebHostName The protocol-stripped URL of the Servlet's WAR
     * @param pWebServletPort The Servlet access port on the Server (e.g., 80)
     * @param pWebServletName The dir/name portion of the installed Web Servlet
     *                        (e.g., subdir/servletname), used to make the URL
     */
    @SuppressWarnings("nls")
    public HttpServletRequestProperties( final int pClientBuildId,
                                    final String pClientType,
                                    final String pLocalHostName,
                                    final String pWebHostName,
                                    final int pWebServletPort,
                                    final String pWebServletName ) {
        clientBuildId = pClientBuildId;
        clientType = pClientType;
        localHostName = pLocalHostName;
        webHostName = pWebHostName;

        // Compile the URL for local host to web host HTTP requests/responses.
        // NOTE: We make this here instead of in the invoker, and don't cache
        //  the servlet port or servlet name, because our needs may change and
        //  this is more flexible than doing it outside this constructor and
        //  then throwing away the uncached parameters.
        httpServletUrl = NetworkUtilities
                .getRelativeURL( "http", pWebHostName, pWebServletPort, pWebServletName );
    }

    @Override
    public boolean equals( final Object other ) {
        if ( this == other ) {
            return true;
        }
        if ( ( other == null ) || ( getClass() != other.getClass() ) ) {
            return false;
        }
        final HttpServletRequestProperties otherServerRequestProperties =
                                                                   ( HttpServletRequestProperties ) other;
        return ( clientBuildId == otherServerRequestProperties.clientBuildId )
                && Objects.equals( clientType, otherServerRequestProperties.clientType )
                && Objects.equals( localHostName, otherServerRequestProperties.localHostName )
                && Objects.equals( webHostName, otherServerRequestProperties.webHostName )
                && Objects.equals( httpServletUrl, otherServerRequestProperties.httpServletUrl );
    }

    @Override
    public int hashCode() {
        return Objects.hash( Integer.valueOf( clientBuildId ),
                             clientType,
                             localHostName,
                             webHostName,
                             httpServletUrl );
    }
}
